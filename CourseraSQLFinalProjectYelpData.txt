/*Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. 
For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. 
You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. 
You will be required to prepare the dataset for the analysis you choose to do. 
As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet."
It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. 
You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. 
If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding*/

1. Profile the data by finding the total number of records for each of the tables below:
SELECT 
COUNT(business_id)
FROM attribute;
i. Attribute table = 10000
SELECT 
COUNT(id)
FROM business;
ii. Business table = 10000
SELECT 
COUNT(business_id)
FROM category;
iii. Category table = 10000
SELECT 
COUNT(business_idid)
FROM checkin;
iv. Checkin table = 10000
SELECT 
COUNT(user_id)
FROM elite_years;
v. elite_years table = 10000
SELECT 
COUNT(user_id)
FROM friend;
vi. friend table = 10000
SELECT 
COUNT(business_id)
FROM hours;
vii. hours table = 10000
SELECT 
COUNT(id)
FROM photo;
viii. photo table = 10000
SELECT 
COUNT(id)
FROM review;
ix. review table = 10000
SELECT 
COUNT(user_id)
FROM tip;
x. tip table = 10000
SELECT 
COUNT(id)
FROM user;
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. 
If two foreign keys are listed in the table, please specify which foreign key.
SELECT 
COUNT(DISTINCT(id))
FROM business;

i. Business = 10000
SELECT 
COUNT(DISTINCT(business_id))
FROM hours;

ii. Hours = 1562
SELECT 
COUNT(DISTINCT(business_id))
FROM category;

iii. Category = 2643
SELECT 
COUNT(DISTINCT(business_id))
FROM attribute;

iv. Attribute = 1115
SELECT 
COUNT(DISTINCT(id))
FROM review;

v. Review = 10000
SELECT 
COUNT(DISTINCT(business_id))
FROM checkin;

vi. Checkin = 493
SELECT 
COUNT(DISTINCT(id))
FROM photo;

vii. Photo = 10000
SELECT 
COUNT(DISTINCT(user_id))
FROM tip;

viii. Tip = 537
SELECT 
COUNT(DISTINCT(id))
FROM user;

ix. User = 10000
SELECT 
COUNT(DISTINCT(user_id))
FROM friend;

x. Friend = 11
SELECT 
COUNT(DISTINCT(user_id))
FROM elite_years;

xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no.
	
	
	SQL code used to arrive at answer:
	SELECT 
COUNT(*)
FROM user
WHERE id IS NULL OR
  name IS NULL OR
  review_count IS NULL OR
  yelping_since IS NULL OR
  useful IS NULL OR
  funny IS NULL OR
  cool IS NULL OR
  fans IS NULL OR
  average_stars IS NULL OR
  compliment_hot IS NULL OR
  compliment_more IS NULL OR
  compliment_profile IS NULL OR
  compliment_cute IS NULL OR
  compliment_list IS NULL OR
  compliment_note IS NULL OR
  compliment_plain IS NULL OR
  compliment_cool IS NULL OR
  compliment_funny IS NULL OR
  compliment_writer IS NULL OR
  compliment_photos IS NULL;

	
	

	
4. For each table and column listed below, display the 
smallest (minimum), largest (maximum), and average (mean) value for the following fields:
SELECT 
MIN(stars),
MAX(stars),
AVG(stars)
FROM review;
	i. Table: Review, Column: Stars
	
		min: 1		max:	 5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max:	5	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max:	2000 	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
SELECT 
city,
SUM(review_count) AS reviews
FROM business
GROUP BY city
ORDER BY reviews DESC;
	Copy and Paste the Result Below:
	
-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT
stars AS Star_Rating,
SUM(review_count) AS count
FROM business
WHERE city = "Avon"
GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
| Star_Rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 

ii. Beachwood

SQL code used to arrive at answer:

SELECT
stars AS Star_Rating,
SUM(review_count) AS count
FROM business
WHERE city = "Beachwood"
GROUP BY stars;
Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
 Star_Rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT
name, 
review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;

		
	Copy and Paste the Result Below:
name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339		


8. Does posing more reviews correlate with more fans?
/*This is the formula for a pearson's coefficient
SELECT
COUNT(id) AS number_users
, SUM(review_count) AS sum_x
, SUM(fans) AS sum_y
, SUM(review_count*fans) AS sum_xy
, SUM(review_count*review_count) AS sum_x2
, SUM(fans*fans) AS sum_y2
, (COUNT(id)*sum_xy-sum_x*sum_y)*(COUNT(id)*sum_xy-sum_x*sum_y)/((COUNT(id)*sum_x2-sum_x*sum_x)*(COUNT(id)*sum_y2-sum_y*sum_y)) AS r2
FROM user;

/*Calculate r2 from review_count and fans
SELECT
COUNT(id) AS number_users
, SUM(review_count) AS sum_x
, SUM(fans) AS sum_y
, SUM(review_count*fans) AS sum_xy
, SUM(review_count*review_count) AS sum_x2
, SUM(fans*fans) AS sum_y2
, (COUNT(id)*SUM(review_count*fans)-SUM(review_count)*SUM(fans))*(COUNT(id)*SUM(review_count*fans)-SUM(review_count)*SUM(fans))/((COUNT(id)*SUM(review_count*review_count)-SUM(review_count)*SUM(review_count))*(COUNT(id)*SUM(fans*fans)-SUM(fans)*SUM(fans))) AS r2
FROM user;

/*Calculate r2 from yelping_cince and fans
SELECT
COUNT(id) AS number_users
, SUM((strftime('%Y','now')-strftime('%Y',yelping_since))) AS sum_x
, SUM(fans) AS sum_y
, SUM((strftime('%Y','now')-strftime('%Y',yelping_since))*fans) AS sum_xy
, SUM((strftime('%Y','now')-strftime('%Y',yelping_since))*(strftime('%Y','now')-strftime('%Y',yelping_since))) AS sum_x2
, SUM(fans*fans) AS sum_y2
--, (COUNT(id)*sum_xy-sum_x*sum_y)*(COUNT(id)*sum_xy-sum_x*sum_y)/((COUNT(id)*sum_x2-sum_x*sum_x)*(COUNT(id)*sum_y2-sum_y*sum_y)) AS r2
, (COUNT(id)*SUM((strftime('%Y','now')-strftime('%Y',yelping_since))*fans)-SUM((strftime('%Y','now')-strftime('%Y',yelping_since)))*SUM(fans))*(COUNT(id)*SUM((strftime('%Y','now')-strftime('%Y',yelping_since))*fans)-SUM((strftime('%Y','now')-strftime('%Y',yelping_since)))*SUM(fans))/((COUNT(id)*SUM((strftime('%Y','now')-strftime('%Y',yelping_since))*(strftime('%Y','now')-strftime('%Y',yelping_since)))-SUM((strftime('%Y','now')-strftime('%Y',yelping_since)))*SUM((strftime('%Y','now')-strftime('%Y',yelping_since))))*(COUNT(id)*SUM(fans*fans)-SUM(fans)*SUM(fans))) AS r2
FROM user;


	Please explain your findings and interpretation of the results:
The r2 for fans and review count is 0.43, showing that 43% of the variance in fans could be explained by the number of reviews.
If we replace review_count with the difference between now and yelping_since, we find that the r2 is zero. 
It's possible there is an interaction between these factors.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	There are 1,780 reviews that contain the text '%love%' and 232 reviews that contain the text '%hate%'.

	
	SQL code used to arrive at answer:
SELECT
COUNT(text)
FROM review
WHERE text like '%love%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT
name, 
fans
FROM user
ORDER BY fans DESC
LIMIT 10;
	
	Copy and Paste the Result Below:
 name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

/*First, what are the different categories?*/
SELECT
DISTINCT(category) AS categories
, COUNT(business_id) AS number_bus
FROM category 
GROUP BY categories
ORDER BY number_bus DESC
LIMIT 10;

/*+------------------+------------+
| categories       | number_bus |
+------------------+------------+
| Restaurants      |        912 |
| Food             |        425 |
| Shopping         |        405 |
| Beauty & Spas    |        224 |
| Nightlife        |        214 |
| Home Services    |        203 |
| Health & Medical |        196 |
| Bars             |        185 |
| Local Services   |        166 |
| Automotive       |        163 |
+------------------+------------+*/

/*And what city has the most restaurants?*/
SELECT
b.city AS City
, COUNT(b.id) AS Number_of_Restaurants
FROM business AS b
INNER JOIN category AS c
ON c.business_id = b.id
WHERE c.category = 'Restaurants'
GROUP BY City
ORDER BY Number_of_Restaurants DESC
LIMIT 10;
/*+-------------+-----------------------+
| City        | Number_of_Restaurants |
+-------------+-----------------------+
| Toronto     |                    10 |
| Phoenix     |                     6 |
| Las Vegas   |                     4 |
| Mississauga |                     4 |
| Edinburgh   |                     3 |
| Chandler    |                     2 |
| Charlotte   |                     2 |
| Cleveland   |                     2 |
| Mesa        |                     2 |
| Montréal    |                     2 |
+-------------+-----------------------+*/
/*So, let's look at the Toronto restaurants. We want to group them into 2-3 Stars and 4-5 Stars. 
There are only ten, let's look at their star ratings and hours.*/
SELECT
b.city AS City
, b.name AS Name
, b.stars AS Stars
, b.review_count AS Review_Count
, h.hours AS Hours
FROM business AS b
INNER JOIN category AS c
ON c.business_id = b.id
/*This left join was important as four of the business didn't have hours*/
LEFT JOIN hours AS h
ON h.business_id = b.id
WHERE c.category = 'Restaurants' AND b.city = 'Toronto'
GROUP BY id
ORDER BY Stars DESC
/*+---------+--------------------+-------+--------------+----------------------+
| City    | Name               | Stars | Review_Count | Hours                |
+---------+--------------------+-------+--------------+----------------------+
| Toronto | Cabin Fever        |   4.5 |           26 | Saturday|16:00-2:00  |
| Toronto | Sushi Osaka        |   4.5 |            8 | Saturday|11:00-23:00 |
| Toronto | Mama Mia           |   4.0 |            8 | None                 |
| Toronto | Naniwa-Taro        |   4.0 |           75 | None                 |
| Toronto | Edulis             |   4.0 |           89 | Saturday|18:00-23:00 |
| Toronto | The Kosher Gourmet |   3.5 |            3 | None                 |
| Toronto | Big Smoke Burger   |   3.0 |           47 | Saturday|10:30-21:00 |
| Toronto | Pizzaiolo          |   3.0 |           34 | Saturday|10:00-4:00  |
| Toronto | 99 Cent Sushi      |   2.0 |            5 | Saturday|11:00-23:00 |
| Toronto | Royal Dumpling     |   1.5 |            4 | None                 |
+---------+--------------------+-------+--------------+----------------------+*/
	
i. Do the two groups you chose to analyze have a different distribution of hours?
/*It's difficult to see the answer to the first question, whether the businesses have different hours. 
Hours is a varchar variable, so it's not like we can easily perform a math function. 
Let's take a look qualitatively. First let's look at the 4-5 star restaurants.*/
SELECT
b.city AS City
, b.name AS Name
, b.stars AS Stars
, b.review_count AS Review_Count
, h.hours AS Hours
FROM business AS b
INNER JOIN category AS c
ON c.business_id = b.id
/*For the first question, we only care about businesses who have posted hours*/
INNER JOIN hours AS h
ON h.business_id = b.id
WHERE c.category = 'Restaurants' AND b.city = 'Toronto'
ORDER BY Stars DESC;
/*+---------+------------------+-------+--------------+-----------------------+
| City    | Name             | Stars | Review_Count | Hours                 |
+---------+------------------+-------+--------------+-----------------------+
| Toronto | Cabin Fever      |   4.5 |           26 | Monday|16:00-2:00     |
| Toronto | Cabin Fever      |   4.5 |           26 | Tuesday|18:00-2:00    |
| Toronto | Cabin Fever      |   4.5 |           26 | Friday|18:00-2:00     |
| Toronto | Cabin Fever      |   4.5 |           26 | Wednesday|18:00-2:00  |
| Toronto | Cabin Fever      |   4.5 |           26 | Thursday|18:00-2:00   |
| Toronto | Cabin Fever      |   4.5 |           26 | Sunday|16:00-2:00     |
| Toronto | Cabin Fever      |   4.5 |           26 | Saturday|16:00-2:00   |
| Toronto | Sushi Osaka      |   4.5 |            8 | Monday|11:00-23:00    |
| Toronto | Sushi Osaka      |   4.5 |            8 | Tuesday|11:00-23:00   |
| Toronto | Sushi Osaka      |   4.5 |            8 | Friday|11:00-23:00    |
| Toronto | Sushi Osaka      |   4.5 |            8 | Wednesday|11:00-23:00 |
| Toronto | Sushi Osaka      |   4.5 |            8 | Thursday|11:00-23:00  |
| Toronto | Sushi Osaka      |   4.5 |            8 | Sunday|14:00-23:00    |
| Toronto | Sushi Osaka      |   4.5 |            8 | Saturday|11:00-23:00  |
| Toronto | Edulis           |   4.0 |           89 | Sunday|12:00-16:00    |
| Toronto | Edulis           |   4.0 |           89 | Friday|18:00-23:00    |
| Toronto | Edulis           |   4.0 |           89 | Wednesday|18:00-23:00 |
| Toronto | Edulis           |   4.0 |           89 | Thursday|18:00-23:00  |
| Toronto | Edulis           |   4.0 |           89 | Saturday|18:00-23:00  |*/
/*So the three 4-5 star ratings are for restaurants that re generally open late. 
Let's look at the the 2-3 star restaurants.
Just change the statement to sort ascending.*/
SELECT
b.city AS City
, b.name AS Name
, b.stars AS Stars
, b.review_count AS Review_Count
, h.hours AS Hours
FROM business AS b
INNER JOIN category AS c
ON c.business_id = b.id
/*For the first question, we only care about businesses who have posted hours*/
INNER JOIN hours AS h
ON h.business_id = b.id
WHERE c.category = 'Restaurants' AND b.city = 'Toronto'
ORDER BY Stars ASC;

/*+---------+------------------+-------+--------------+-----------------------+
| City    | Name             | Stars | Review_Count | Hours                 |
+---------+------------------+-------+--------------+-----------------------+
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Monday|11:00-23:00    |
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Tuesday|11:00-23:00   |
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Friday|11:00-23:00    |
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Wednesday|11:00-23:00 |
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Thursday|11:00-23:00  |
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Sunday|11:00-23:00    |
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Saturday|11:00-23:00  |
| Toronto | Big Smoke Burger |   3.0 |           47 | Monday|10:30-21:00    |
| Toronto | Big Smoke Burger |   3.0 |           47 | Tuesday|10:30-21:00   |
| Toronto | Big Smoke Burger |   3.0 |           47 | Friday|10:30-21:00    |
| Toronto | Big Smoke Burger |   3.0 |           47 | Wednesday|10:30-21:00 |
| Toronto | Big Smoke Burger |   3.0 |           47 | Thursday|10:30-21:00  |
| Toronto | Big Smoke Burger |   3.0 |           47 | Sunday|11:00-19:00    |
| Toronto | Big Smoke Burger |   3.0 |           47 | Saturday|10:30-21:00  |
| Toronto | Pizzaiolo        |   3.0 |           34 | Monday|9:00-23:00     |
| Toronto | Pizzaiolo        |   3.0 |           34 | Tuesday|9:00-23:00    |
| Toronto | Pizzaiolo        |   3.0 |           34 | Friday|9:00-4:00      |
| Toronto | Pizzaiolo        |   3.0 |           34 | Wednesday|9:00-23:00  |
| Toronto | Pizzaiolo        |   3.0 |           34 | Thursday|9:00-23:00   |
| Toronto | Pizzaiolo        |   3.0 |           34 | Sunday|10:00-23:00    |
| Toronto | Pizzaiolo        |   3.0 |           34 | Saturday|10:00-4:00  */

/*Two of the 4-5 star restaurants, Cabin Fever and Edulis open later. 
This would fit with your perception of a nicer restaurant. 
My assumption would be that these restaurants would be pricier as well.*/

ii. Do the two groups you chose to analyze have a different number of reviews?
/*This one is easier to test.*/
SELECT
b.city AS City
, b.name AS Name
, b.stars AS Stars
, b.review_count AS Review_Count
--, h.hours AS Hours
FROM business AS b
INNER JOIN category AS c
ON c.business_id = b.id
INNER JOIN hours AS h
ON h.business_id = b.id
WHERE c.category = 'Restaurants' AND b.city = 'Toronto'
GROUP BY b.id
ORDER BY Review_Count DESC;
 /*+---------+------------------+-------+--------------+
| City    | Name             | Stars | Review_Count |
+---------+------------------+-------+--------------+
| Toronto | Edulis           |   4.0 |           89 |
| Toronto | Big Smoke Burger |   3.0 |           47 |
| Toronto | Pizzaiolo        |   3.0 |           34 |
| Toronto | Cabin Fever      |   4.5 |           26 |
| Toronto | Sushi Osaka      |   4.5 |            8 |
| Toronto | 99 Cent Sushi    |   2.0 |            5 |
+---------+------------------+-------+--------------+*/
/* There doesn't seem to be an apparent qualitative relationship between the two groups.
Just eyeing the numbers, it looks like the 4-5 star restaurants average about forty reviews and the 2-3 star restaurants average a little under 30. 
It's a small sample size to draw any conclusions, but the 4 star Edulis is obviously making it seem like the more reviews you get, the better the ratings.*/
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
/*I wonder if the 4-5 star restaurants are closer together than the 2-3 star ones.
The easiest way to do this would be to use postal code.*/
SELECT
b.city AS City
, b.name AS Name
, b.stars AS Stars
, b.review_count AS Review_Count
, b.neighborhood AS Neighborhood
FROM business AS b
INNER JOIN category AS c
ON c.business_id = b.id
/*For the first question, we only care about businesses who have posted hours*/
INNER JOIN hours AS h
ON h.business_id = b.id
WHERE c.category = 'Restaurants' AND b.city = 'Toronto' 
GROUP BY b.id
ORDER BY Stars DESC;
+---------+------------------+-------+--------------+------------------------+
| City    | Name             | Stars | Review_Count | Neighborhood           |
+---------+------------------+-------+--------------+------------------------+
| Toronto | Cabin Fever      |   4.5 |           26 | High Park              |
| Toronto | Sushi Osaka      |   4.5 |            8 | Etobicoke              |
| Toronto | Edulis           |   4.0 |           89 | Niagara                |
| Toronto | Big Smoke Burger |   3.0 |           47 | Downtown Core          |
| Toronto | Pizzaiolo        |   3.0 |           34 | Entertainment District |
| Toronto | 99 Cent Sushi    |   2.0 |            5 | Downtown Core          |
+---------+------------------+-------+--------------+------------------------+
/*It looks like the 2-3 star restaurants are all in the downtown section.*/



		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
        /* The restaurants that are no longer open had an average star rating of 2. The ones that are still open have an average star rating of 3.8.*/
         
ii. Difference 2:
         /*The restaurants that are no longer open had an average number of 5 reviews. The ones that are still open have an average star rating of 3.8.*/
         
         
SQL code used for analysis:
SELECT
b.city AS City
, COUNT(b.id) AS Number
, AVG(b.stars) AS Average_Stars
, AVG(b.review_count) AS Average_Review_Count
FROM business AS b
INNER JOIN category AS c
ON c.business_id = b.id
INNER JOIN hours AS h
ON h.business_id = b.id
WHERE c.category = 'Restaurants' AND b.city = 'Toronto' 
GROUP BY b.is_open
ORDER BY Stars DESC;

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, 
clustering businesses to find commonalities or anomalies between them, 
predicting the overall star rating for a business, 
predicting the number of fans a user will have, and so on. 
These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. 
Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
/*Do you get more fans as a yelp reviewer if you are biased positive or negative?*/
/*First question, what is the average and standard deviation of yelp reviews?*/
SELECT 
AVG(stars)
FROM review;
/*The average review is a 3.7*/
/*As an extremely simple query, let's just see if users whose reviews are on average four or higher have more fans than those with three or lower.*/
SELECT
AVG(fans)
from user
WHERE average_stars >= 4;
/*The average user has 1.12 fans if their average stars are four or more. 
The average user has 1.12 fans if their average stars are three or less. 
The average user has 2.43 fans if their average stars are between three and four stars. */


         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                
                  
iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset: